import org.tmatesoft.svn.core.wc.*

apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'androidx.navigation.safeargs'

apply plugin: 'io.fabric'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.gorilla.attendance"
        minSdkVersion 23
        targetSdkVersion 28
        multiDexEnabled true
        versionCode 10
        versionName "1.2.0.2"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    dataBinding {
        enabled = true
    }

    android.sourceSets.androidTest {
        resources.srcDirs += ['src/androidTest/assets']
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            output.outputFileName = "Attendance_v${variant.versionName}_svn${getSvnRevision()}_${buildTime()}.apk"
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

//    implementation "com.android.support:cardview-v7:$rootProject.supportLibraryVersion"
//    implementation "com.android.support:appcompat-v7:$rootProject.supportLibraryVersion"
//    implementation "com.android.support:recyclerview-v7:$rootProject.supportLibraryVersion"
//    implementation "com.android.support:cardview-v7:$rootProject.supportLibraryVersion"
//    implementation "com.android.support:design:$rootProject.supportLibraryVersion"

    implementation 'androidx.appcompat:appcompat:1.1.0-rc01'
    implementation 'androidx.core:core-ktx:1.2.0-alpha02'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.google.android.material:material:1.1.0-alpha09'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.0.0'

    // Mockito
    testImplementation 'org.mockito:mockito-core:2.19.0'
    testImplementation 'org.mockito:mockito-inline:2.19.0'
    androidTestImplementation 'org.mockito:mockito-android:2.19.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "com.android.support.constraint:constraint-layout:$rootProject.constraintLayoutVersion"
    testImplementation "junit:junit:$rootProject.junitVersion"
    androidTestImplementation "com.android.support.test:runner:$rootProject.testRunnerVersion"
    androidTestImplementation "com.android.support.test:rules:$rootProject.testRunnerVersion"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$rootProject.espressoVersion"
    androidTestImplementation "com.android.support.test.espresso:espresso-contrib:$rootProject.espressoVersion"
    androidTestImplementation "com.android.support.test.espresso:espresso-idling-resource:$rootProject.espressoVersion"

    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:2.0.0"
    androidTestImplementation "androidx.arch.core:core-testing:2.0.0"
    testImplementation "androidx.arch.core:core-testing:2.0.0"
    kapt "androidx.lifecycle:lifecycle-compiler:2.0.0"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$rootProject.retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$rootProject.retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$rootProject.retrofitVersion"

    //for print http log
    implementation 'com.squareup.okhttp3:logging-interceptor:3.6.0'


    // RxJava2
    implementation "io.reactivex.rxjava2:rxjava:2.2.2"
    implementation "io.reactivex.rxjava2:rxandroid:2.1.0"
    implementation 'com.jakewharton.rxbinding:rxbinding-kotlin:0.4.0'

    // Glide
    implementation "com.github.bumptech.glide:glide:$rootProject.glideVersion"
    kapt "com.github.bumptech.glide:compiler:$rootProject.glideVersion"

    // Dagger
    implementation "com.google.dagger:dagger:$rootProject.daggerVersion"
    implementation "com.google.dagger:dagger-android-support:$rootProject.daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$rootProject.daggerVersion"
    kapt "com.google.dagger:dagger-android-processor:$rootProject.daggerVersion"

    // Timber
    implementation "com.jakewharton.timber:timber:$rootProject.timberVersion"

    // Navigation
    implementation "android.arch.navigation:navigation-runtime:$navigation_version"
    implementation "android.arch.navigation:navigation-runtime-ktx:$navigation_version"
    implementation "android.arch.navigation:navigation-fragment:$navigation_version"
    implementation "android.arch.navigation:navigation-fragment-ktx:$navigation_version"

    // Room
    implementation "android.arch.persistence.room:runtime:$roomVersion"
    annotationProcessor "android.arch.persistence.room:compiler:$roomVersion"
    kapt "android.arch.persistence.room:compiler:$roomVersion"
    implementation "android.arch.persistence.room:rxjava2:$roomVersion"

    // Circle avatar
    implementation 'de.hdodenhof:circleimageview:3.0.0'

    // Kotlin coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1"

    // QRcode
    implementation 'com.journeyapps:zxing-android-embedded:3.5.0'

    // Web Socket
    implementation 'org.java-websocket:Java-WebSocket:1.3.0'

    // Firebase
    implementation 'com.google.firebase:firebase-core:17.0.1'
    implementation 'com.google.firebase:firebase-analytics:17.0.1'
    implementation 'com.crashlytics.sdk.android:crashlytics:2.10.1'

    implementation project(path: ':downloader_library')
    implementation project(path: ':licensing_library')
    implementation project(path: ':zip_file')
    implementation project(path: ':FDRControl')
    implementation files('libs/acssmc-1.1.3.jar')
}

def getSvnRevision(){
    ISVNOptions options = SVNWCUtil.createDefaultOptions(true)
    SVNClientManager clientManager = SVNClientManager.newInstance(options)
    SVNStatusClient statusClient = clientManager.getStatusClient()
    SVNStatus status = statusClient.doStatus(projectDir, false)
    SVNRevision revision = status.getRevision()
    return revision.getNumber()
}

def buildTime() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd')
    return formattedDate
}

task generateStrings {
    def sw = new StringWriter()
    def xml = new groovy.xml.MarkupBuilder(sw)

    //add json values to the xml builder
    xml.resources() {
        string(name: "svn_revision", getSvnRevision())
    }

    def stringsFile = new File("app/src/main/res/values/svn.xml")
    stringsFile.write(sw.toString())
}

apply plugin: 'com.google.gms.google-services'  // Google Play services Gradle plugin